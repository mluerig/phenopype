{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Example 6: Counting and measuring freshwater snails\n",
    "\n",
    "In this example we will use thresholding and watershed algorithms to count freshwater snails."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"row; text-align: left\">\n",
    "    \n",
    "<div class=\"col-md-6\">\n",
    "    \n",
    "![Before](_assets/ex6_before.jpg)\n",
    "    \n",
    "**Input** - Snails photographed from a camera stand. Variable brightness across the tray and snail clumping are the biggest challenges.\n",
    "</div>\n",
    "<div class=\"col-md-6\">\n",
    "\n",
    "![After](_assets/ex6_after.jpg)\n",
    "    \n",
    "**Results** - After applying adaptive thresholding and a watershed algorithm, the snail separate well from the background. Now we can count them, and measure size, shape and colouration\n",
    "</div>\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Low throughput\n",
    "\n",
    "First, we test a single image with the low throughput workflow."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import phenopype as pp\n",
    "import os "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "filepath = \"images/snails1.jpg\"\n",
    "image, img_data = pp.load_image(filepath, \n",
    "                                df=True)\n",
    "pp.show_image(image)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Begin by drawing a mask around the snails inside the tray by dragging a rectangle around them - finish with `Enter`, abort with `Esc`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "- creating mask\n"
     ]
    }
   ],
   "source": [
    "df_masks = pp.preprocessing.create_mask(image)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we need to measure the pixel-to-mm-ratio. The snail pictures don't contain a scale that is appropriate for automatic detection - the millimeter-paper on the side does not contain enough unique keypoints to be detected automatically (for cases where this works see [Example 1](example_1_detect_objects_isopods.ipynb) and [Example 2])(example_2_landmarks_stickleback.ipynb). Therefore each image needs to be manually measured by dragging a line across the mm-paper, and entering the distance. \n",
    "\n",
    "**Note:** It is better to measure a long distance than a short distance to minimize the measurement error - use the full length (~70 mm) here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "- measure pixel-to-mm-ratio\n",
      "Reference set\n",
      "- add column length\n"
     ]
    }
   ],
   "source": [
    "img_data = pp.preprocessing.create_reference(image, \n",
    "                                             img_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For high data quality it is important to verify the ID of the specimen in the current picture. Often, the picture name contains the ID, but typically an label is placed inside the image. Using the `enter_data` tool we open the image and an entry prompt that will create a column with a name of our chosing inside all exported results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "- add column ID\n"
     ]
    }
   ],
   "source": [
    "img_data = pp.preprocessing.enter_data(image, \n",
    "                                       img_data, \n",
    "                                       columns=\"ID\") "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next is segmentation. First we blur the image a little, convert it to a binary image, and look at the results:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "- including pixels from 1 drawn masks \n"
     ]
    }
   ],
   "source": [
    "image_blurred = pp.segmentation.blur(image)\n",
    "image_bin = pp.segmentation.threshold(image_blurred, \n",
    "                                      df_masks=df_masks,\n",
    "                                      method=\"adaptive\", \n",
    "                                      blocksize=59, ## relatively low sensitivity\n",
    "                                      constant=10) ## constant gets subtracted from the binary result\n",
    "pp.show_image(image_bin)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The break up the clumping, we apply the watershed algorithm to the binarized image:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "- found 214 contours that match criteria\n"
     ]
    }
   ],
   "source": [
    "image_bin = pp.segmentation.watershed(image, \n",
    "                                      image_thresh=image_bin, \n",
    "                                      distance_cutoff=0.5) # , iterations=1, kernel_size=1\n",
    "pp.show_image(image_bin)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "- found 107 contours that match criteria\n"
     ]
    }
   ],
   "source": [
    "df_contours = pp.segmentation.find_contours(image_bin, \n",
    "                                            min_area=150) # needs to be \"child\" for watershed"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With the contours we have acquired the primary information (counts, size, area) contained in the image. However, since we have the contour location, we get the colour for free. Note that we also measure the background whiteness of each scale (`background=True`). This is important, as the snails lie across a brightness gradient within the images. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>filename</th>\n",
       "      <th>width</th>\n",
       "      <th>height</th>\n",
       "      <th>px_mm_ratio</th>\n",
       "      <th>ID</th>\n",
       "      <th>contour</th>\n",
       "      <th>gray_mean</th>\n",
       "      <th>gray_sd</th>\n",
       "      <th>gray_mean_b</th>\n",
       "      <th>gray_sd_b</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>snails1.jpg</td>\n",
       "      <td>2048</td>\n",
       "      <td>1536</td>\n",
       "      <td>8.301071</td>\n",
       "      <td>163</td>\n",
       "      <td>1</td>\n",
       "      <td>17.473</td>\n",
       "      <td>8.77379</td>\n",
       "      <td>143.837</td>\n",
       "      <td>36.8937</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>snails1.jpg</td>\n",
       "      <td>2048</td>\n",
       "      <td>1536</td>\n",
       "      <td>8.301071</td>\n",
       "      <td>163</td>\n",
       "      <td>2</td>\n",
       "      <td>75.2904</td>\n",
       "      <td>23.4319</td>\n",
       "      <td>156.452</td>\n",
       "      <td>30.2478</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>snails1.jpg</td>\n",
       "      <td>2048</td>\n",
       "      <td>1536</td>\n",
       "      <td>8.301071</td>\n",
       "      <td>163</td>\n",
       "      <td>3</td>\n",
       "      <td>14.6265</td>\n",
       "      <td>7.2387</td>\n",
       "      <td>137.795</td>\n",
       "      <td>36.1294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>snails1.jpg</td>\n",
       "      <td>2048</td>\n",
       "      <td>1536</td>\n",
       "      <td>8.301071</td>\n",
       "      <td>163</td>\n",
       "      <td>4</td>\n",
       "      <td>32.4597</td>\n",
       "      <td>18.9484</td>\n",
       "      <td>160.683</td>\n",
       "      <td>28.7027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>snails1.jpg</td>\n",
       "      <td>2048</td>\n",
       "      <td>1536</td>\n",
       "      <td>8.301071</td>\n",
       "      <td>163</td>\n",
       "      <td>5</td>\n",
       "      <td>20.8357</td>\n",
       "      <td>6.70049</td>\n",
       "      <td>150.752</td>\n",
       "      <td>36.5441</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102</th>\n",
       "      <td>snails1.jpg</td>\n",
       "      <td>2048</td>\n",
       "      <td>1536</td>\n",
       "      <td>8.301071</td>\n",
       "      <td>163</td>\n",
       "      <td>103</td>\n",
       "      <td>8.66171</td>\n",
       "      <td>2.80216</td>\n",
       "      <td>98.9212</td>\n",
       "      <td>22.494</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>103</th>\n",
       "      <td>snails1.jpg</td>\n",
       "      <td>2048</td>\n",
       "      <td>1536</td>\n",
       "      <td>8.301071</td>\n",
       "      <td>163</td>\n",
       "      <td>104</td>\n",
       "      <td>33.8171</td>\n",
       "      <td>11.4594</td>\n",
       "      <td>97.1136</td>\n",
       "      <td>15.8264</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104</th>\n",
       "      <td>snails1.jpg</td>\n",
       "      <td>2048</td>\n",
       "      <td>1536</td>\n",
       "      <td>8.301071</td>\n",
       "      <td>163</td>\n",
       "      <td>105</td>\n",
       "      <td>11.7825</td>\n",
       "      <td>4.91391</td>\n",
       "      <td>92.8656</td>\n",
       "      <td>20.6969</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>105</th>\n",
       "      <td>snails1.jpg</td>\n",
       "      <td>2048</td>\n",
       "      <td>1536</td>\n",
       "      <td>8.301071</td>\n",
       "      <td>163</td>\n",
       "      <td>106</td>\n",
       "      <td>9.56656</td>\n",
       "      <td>3.64157</td>\n",
       "      <td>94.618</td>\n",
       "      <td>21.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>106</th>\n",
       "      <td>snails1.jpg</td>\n",
       "      <td>2048</td>\n",
       "      <td>1536</td>\n",
       "      <td>8.301071</td>\n",
       "      <td>163</td>\n",
       "      <td>107</td>\n",
       "      <td>9.02029</td>\n",
       "      <td>3.80726</td>\n",
       "      <td>98.5129</td>\n",
       "      <td>19.3734</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>107 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        filename  width  height  px_mm_ratio   ID contour gray_mean  gray_sd  \\\n",
       "0    snails1.jpg   2048    1536     8.301071  163       1    17.473  8.77379   \n",
       "1    snails1.jpg   2048    1536     8.301071  163       2   75.2904  23.4319   \n",
       "2    snails1.jpg   2048    1536     8.301071  163       3   14.6265   7.2387   \n",
       "3    snails1.jpg   2048    1536     8.301071  163       4   32.4597  18.9484   \n",
       "4    snails1.jpg   2048    1536     8.301071  163       5   20.8357  6.70049   \n",
       "..           ...    ...     ...          ...  ...     ...       ...      ...   \n",
       "102  snails1.jpg   2048    1536     8.301071  163     103   8.66171  2.80216   \n",
       "103  snails1.jpg   2048    1536     8.301071  163     104   33.8171  11.4594   \n",
       "104  snails1.jpg   2048    1536     8.301071  163     105   11.7825  4.91391   \n",
       "105  snails1.jpg   2048    1536     8.301071  163     106   9.56656  3.64157   \n",
       "106  snails1.jpg   2048    1536     8.301071  163     107   9.02029  3.80726   \n",
       "\n",
       "    gray_mean_b gray_sd_b  \n",
       "0       143.837   36.8937  \n",
       "1       156.452   30.2478  \n",
       "2       137.795   36.1294  \n",
       "3       160.683   28.7027  \n",
       "4       150.752   36.5441  \n",
       "..          ...       ...  \n",
       "102     98.9212    22.494  \n",
       "103     97.1136   15.8264  \n",
       "104     92.8656   20.6969  \n",
       "105      94.618     21.66  \n",
       "106     98.5129   19.3734  \n",
       "\n",
       "[107 rows x 10 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pp.measurement.colour_intensity(image,\n",
    "                                img_data,\n",
    "                                df_contours,\n",
    "                                background=True) # this measures the whiteness of the area around each detected snails "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we draw the contours..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "- raw image\n"
     ]
    }
   ],
   "source": [
    "canvas = pp.visualization.select_canvas(image, # onto which image should the contours be draw\n",
    "                               canvas=\"raw\") # raw = original image\n",
    "canvas = pp.visualization.draw_contours(canvas, \n",
    "                                        df_contours,\n",
    "                                        fill=0, \n",
    "                                        line_width=2, \n",
    "                                        watershed=True, # this flag needs to be added when using watershedding\n",
    "                                        bounding_box=True) # this indicates the area where the background was measured\n",
    "pp.show_image(canvas)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "... and save them, as well as the masks (if we need to redo this) and the canvas for quality control."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "- canvas saved under _temp/output/ex6\\canvas.jpg (overwritten).\n",
      "- masks saved under _temp/output/ex6\\masks.csv (overwritten).\n",
      "- contours saved under _temp/output/ex6\\contours.csv (overwritten).\n"
     ]
    }
   ],
   "source": [
    "pp.export.save_canvas(canvas, dirpath=\"_temp/output/ex6\")\n",
    "pp.export.save_masks(df_masks, dirpath=\"_temp/output/ex6\")\n",
    "pp.export.save_contours(df_contours, dirpath=\"_temp/output/ex6\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Note:** the countour csv contains only the inner, watershedded contours (separated=\"child\"), the outer (unseparated=\"parent\") were removed with `find_contours`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## High throughput \n",
    "\n",
    "As for the other examples I have created a template (`ex6`) with appropriate settings for the example. The template can be passed to the `pype` using `template=\"ex6\"` - see below. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center>\n",
    "<div style=\"width:700px; text-align: justify\">\n",
    "    \n",
    "![Adding a scale](_assets/ex6_out.jpg)\n",
    "\n",
    "Because there is a brightness gradient across the image, correcting the exposure across all images will not work. Instead we use the `colour_intensity` to return the local background whiteness (within the rectangle, excluding all snail pixels). Each snail will have an individual background brightness score that can be used to normalize the detected values, so that the colour intensity becomes a meaningful trait within and across images.\n",
    "</div>\n",
    "</center>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, set some directories and inspect the template:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SHOWING BUILTIN PHENOPYPE TEMPLATE ex6.yaml\n",
      "\n",
      "\n",
      "- preprocessing:\n",
      "  - create_mask\n",
      "  - create_reference\n",
      "  - enter_data\n",
      "- segmentation:\n",
      "  - blur:\n",
      "      kernel_size: 3\n",
      "  - threshold:\n",
      "      method: adaptive\n",
      "      blocksize: 59\n",
      "      constant: 10\n",
      "      channel: gray\n",
      "  - watershed:\n",
      "      distance_cutoff: 0.5\n",
      "#     - draw  # to separate snails\n",
      "  - find_contours:\n",
      "      retrieval: ccomp   # needs to be ccomp for watershed\n",
      "      min_diameter: 0\n",
      "      min_area: 200\n",
      "      subset: child   # needs to be child for watershed\n",
      "- measurement:\n",
      "  - colour_intensity:\n",
      "      background: true\n",
      "- visualization:\n",
      "  - select_canvas:\n",
      "      canvas: raw\n",
      "  - draw_contours:\n",
      "      line_width: 2\n",
      "      label_width: 1\n",
      "      label_size: 1\n",
      "      fill: 0\n",
      "      watershed: true\n",
      "      bounding_box: true\n",
      "  - draw_masks\n",
      "- export:\n",
      "  - save_contours:\n",
      "      save_coords: false\n",
      "  - save_colours\n",
      "  - save_masks\n"
     ]
    }
   ],
   "source": [
    "import phenopype as pp\n",
    "import os \n",
    "\n",
    "project_root = r\"_temp/output/ex6_proj\"\n",
    "images = r\"images\"\n",
    "\n",
    "pp.show_config_template(\"ex6\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then create a project. As stated above in the low throughput instructions: defining a project wide scale will not work because the provided reference card is too homogeneous, i.e. does not contain enough keypoints for registration by `find_scale`. If you already have created the project, simply load it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--------------------------------------------\n",
      "Project loaded from \n",
      "D:\\workspace\\git\\phenopype\\tutorials\\_temp\\output\\ex6_proj\n",
      "\n",
      "Project has 2 image folders\n",
      "--------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "if not os.path.isdir(project_root):\n",
    "    proj = pp.project(root_dir=project_root, \n",
    "                      overwrite=True)\n",
    "    proj.add_files(image_dir=images, \n",
    "                   include=\"snails\",\n",
    "                   overwrite=True)\n",
    "    proj.add_config(name = \"v1\", \n",
    "                    overwrite=True, \n",
    "                    template=\"ex6\")\n",
    "    pp.project.save(proj, \n",
    "                    overwrite=True)\n",
    "else:\n",
    "    proj = pp.project.load(project_root)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now you can loop through all directories stored within the project object to detect the snails."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Succesfully loaded existing pype config (pype_config_v1.yaml) from:\n",
      "D:\\workspace\\git\\phenopype\\tutorials\\_temp\\output\\ex6_proj\\data\\0__snails1\\pype_config_v1.yaml \n",
      "\n",
      "\n",
      "------------+++ new pype iteration 2021:05:10 16:11:10 +++--------------\n",
      "\n",
      "\n",
      "=== AUTOLOAD ===\n",
      "- columns ID from attributes.yaml\n",
      "- masks_v1.csv\n",
      "PREPROCESSING\n",
      "create_mask\n",
      "- mask with label mask1 already created (edit/overwrite=False)\n",
      "create_reference\n",
      "- measure pixel-to-mm-ratio\n",
      "Reference set\n",
      "- add column length\n",
      "enter_data\n",
      "- column ID already created (overwrite=False)\n",
      "SEGMENTATION\n",
      "blur\n",
      "threshold\n",
      "- including pixels from 1 drawn masks \n",
      "watershed\n",
      "- found 223 contours that match criteria\n",
      "find_contours\n",
      "- found 102 contours that match criteria\n",
      "MEASUREMENT\n",
      "colour_intensity\n",
      "VISUALIZATION\n",
      "select_canvas\n",
      "- raw image\n",
      "draw_contours\n",
      "draw_masks\n",
      "drawing mask: mask1\n",
      "EXPORT\n",
      "save_contours\n",
      "- contours saved under D:\\workspace\\git\\phenopype\\tutorials\\_temp\\output\\ex6_proj\\data\\0__snails1\\contours_v1.csv (overwritten).\n",
      "save_colours\n",
      "- colours saved under D:\\workspace\\git\\phenopype\\tutorials\\_temp\\output\\ex6_proj\\data\\0__snails1\\colours_v1.csv (overwritten).\n",
      "save_masks\n",
      "- masks saved under D:\\workspace\\git\\phenopype\\tutorials\\_temp\\output\\ex6_proj\\data\\0__snails1\\masks_v1.csv (overwritten).\n",
      "=== AUTOSAVE ===\n",
      "save_canvas\n",
      "- canvas saved under D:\\workspace\\git\\phenopype\\tutorials\\_temp\\output\\ex6_proj\\data\\0__snails1\\canvas_v1.jpg (overwritten).\n",
      "save_data_entry\n",
      "- add column ID (overwriting)\n",
      "\n",
      "\n",
      "------------+++ finished pype iteration +++--------------\n",
      "-------(End with Ctrl+Enter or re-run with Enter)--------\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "------------+++ new pype iteration 2021:05:10 16:11:25 +++--------------\n",
      "\n",
      "\n",
      "Nothing loaded.\n",
      "PREPROCESSING\n",
      "create_mask\n",
      "- mask with label mask1 already created (edit/overwrite=False)\n",
      "create_reference\n",
      "- measure pixel-to-mm-ratio\n",
      "preprocessing.create_reference: AttributeError - '_image_viewer' object has no attribute 'reference_coords'\n",
      "enter_data\n",
      "- column ID already created (overwrite=False)\n",
      "SEGMENTATION\n",
      "blur\n",
      "threshold\n",
      "- including pixels from 1 drawn masks \n",
      "watershed\n",
      "- found 223 contours that match criteria\n",
      "find_contours\n",
      "- found 102 contours that match criteria\n",
      "MEASUREMENT\n",
      "colour_intensity\n",
      "VISUALIZATION\n",
      "select_canvas\n",
      "- raw image\n",
      "draw_contours\n",
      "draw_masks\n",
      "drawing mask: mask1\n",
      "EXPORT\n",
      "save_contours\n",
      "- contours saved under D:\\workspace\\git\\phenopype\\tutorials\\_temp\\output\\ex6_proj\\data\\0__snails1\\contours_v1.csv (overwritten).\n",
      "save_colours\n",
      "- colours saved under D:\\workspace\\git\\phenopype\\tutorials\\_temp\\output\\ex6_proj\\data\\0__snails1\\colours_v1.csv (overwritten).\n",
      "save_masks\n",
      "- masks saved under D:\\workspace\\git\\phenopype\\tutorials\\_temp\\output\\ex6_proj\\data\\0__snails1\\masks_v1.csv (overwritten).\n",
      "=== AUTOSAVE ===\n",
      "save_canvas\n",
      "- canvas saved under D:\\workspace\\git\\phenopype\\tutorials\\_temp\\output\\ex6_proj\\data\\0__snails1\\canvas_v1.jpg (overwritten).\n",
      "save_data_entry\n",
      "- add column ID (overwriting)\n",
      "\n",
      "\n",
      "------------+++ finished pype iteration +++--------------\n",
      "-------(End with Ctrl+Enter or re-run with Enter)--------\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "TERMINATE\n",
      "Succesfully loaded existing pype config (pype_config_v1.yaml) from:\n",
      "D:\\workspace\\git\\phenopype\\tutorials\\_temp\\output\\ex6_proj\\data\\0__snails2\\pype_config_v1.yaml \n",
      "\n",
      "\n",
      "------------+++ new pype iteration 2021:05:10 16:11:30 +++--------------\n",
      "\n",
      "\n",
      "Nothing loaded.\n",
      "PREPROCESSING\n",
      "create_mask\n",
      "- creating mask\n"
     ]
    },
    {
     "ename": "SystemExit",
     "evalue": "\n\nTERMINATE (by user)",
     "output_type": "error",
     "traceback": [
      "An exception has occurred, use %tb to see the full traceback.\n",
      "\u001b[1;31mSystemExit\u001b[0m\u001b[1;31m:\u001b[0m \n\nTERMINATE (by user)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: To exit: use 'exit', 'quit', or Ctrl-D.\n"
     ]
    }
   ],
   "source": [
    "for i in proj.dirpaths:\n",
    "    p = pp.pype(i, name=\"v1\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the end, use the `collect_results` method of `proj` to save all results to a folder in the root directory."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Created D:\\workspace\\git\\phenopype\\tutorials\\_temp\\output\\ex6_proj\\contours_ref\n",
      "['contours_v1']\n",
      "Collected contours_v1.csv from 0__snails1\n",
      "0__snails1_contours_v1.csv saved under D:\\workspace\\git\\phenopype\\tutorials\\_temp\\output\\ex6_proj\\contours_ref\\0__snails1_contours_v1.csv.\n"
     ]
    }
   ],
   "source": [
    "proj.collect_results(name=\"v1\",\n",
    "                     files=[\"contours\"], \n",
    "                     folder=\"contours_ref\", \n",
    "                     overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
